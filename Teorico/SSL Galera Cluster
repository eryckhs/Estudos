----------------------------------------------------------------------------------------------------------------------
Title : OpenSSL  CWith MariaDB and Galeraluster
Author: Eryck Santos <eryck.ehs@gmail.com> 
Description: This document is to be used to configure encryption between nodes while replicating its data.
References:

----------------------------------------------------------------------------------------------------------------------
Before you read this document I would like to share some knowledge that I gathered while researching for this topic.

The replication that Galeraluster does is not encrypted, therefore its content is in plain text and any sniffing tool
would be able to get a hold of the data that is being replicated. It is deemed necessary to enable encryption
to secure the replicatio processes.

Another thing to note is that there is a lot replication packets transmited, but only a few contain the actual data.
the packets that contain data are the most lengthy and they contain the actual commands to replicate the data to the 
other nodes.

If using tcpdump to sniff the replication process, i would recommed using wireshark to analyse the packets sniffed.
in wireshark the process to filter the length of the packets is easier.

----------------------------------------------------------------------------------------------------------------------
Pre-Configuration:
Galera cluster uses SSL certificates to enable encryption in the cluster. therefore it is necessary to first generate
the certificates and keys for the server and the Certificate Authority (CA). you might as well create a certificate 
for the client, but it will not be used in the encryption of the replication processes, but only for the encryption
of the database.    

CA Certificate
 Generate the CA key:

    # openssl genrsa 2048 > ca-key.pem

 Using the CA key, generate the CA certificate.

    # openssl req -new -x509 -nodes -days 365000 -key ca-key.pem -out ca-cert.pem
    
Server Certificate:
 Create the server key.

    openssl req -newkey rsa:2048 -days 365000 -nodes -keyout server-key.pem -out server-req.pem
    
 Process the server RSA key.

    openssl rsa -in server-key.pem -out server-key.pem
    
 Sign the server certificate.

    openssl x509 -req -in server-req.pem -days 365000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 \
    out server-cert.pem
    
Client Certificate:
 Create the client key.

    openssl req -newkey rsa:2048 -days 365000 -nodes -keyout client-key.pem -out client-req.pem

 Process client RSA key.

    openssl rsa -in client-key.pem -out client-key.pem

 Sign the client certificate.

    openssl x509 -req -in client-req.pem -days 365000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 \
    -out client-cert.pem
    
To verify your certificates, run:

    openssl verify -CAfile ca-cert.pem server-cert.pem client-cert.pem
    
Note that the names of the of the country, state and enterprise must differ from one another
Each node need a copy of these files:
Certificate Authority: ca-cert.pem.
Server Certificate: server-key.pem and server-cert.pem.
Client Certificate: client-key.pem and client-cert.pem.
copy them using scp:
    
    scp eryck@192.168.3.150:file_path_src file_path_dest
    
Place these files in the /etc/mysql/certs directory, so that you can know the path to each file
you will need the path to use in the configuration file.

----------------------------------------------------------------------------------------------------------------------
Configuring The File:
In order to enable SSL on the internal node processes, you need to define the paths to the key, certificate and 
certificate authority files that you want the node to use in encrypting replication traffic.
You can configure these options through the wsrep_provider_options parameter in the configuration file, (that is, my.cnf).

Open my.cnf file:

    (...)
    wsrep_provider_options="socket.ssl_key=/path/to/server-key.pem;socket.ssl_cert=/path/to/server-cert.pem;socket.ssl_ca=/path/to/ca-cert.pem"
    (...)

----------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------






