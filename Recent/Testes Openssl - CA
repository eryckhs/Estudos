Este documento é sobre testes feito em um cluster de 3 nós com o objetivo de habilitar a rotaçao de certificados
a quente, ou seja, sem a necessidade de derrubar o cluster por completo, mas apenas um nó por vez.

Foi constatado que para aplicar novas alterações a uma maquina é necessário reinicar o serviço mysql.
Esse fato pode ser refutado caso mais testes sejam feitos, mas no momento irei tomar isso como padrão.

hipotese: pode ser possivel estabelecer criptografia entre os nos de um cluster baseado apenas na CA, ou seja
criptografia utilizando diferentes certificados assinados pela mesma CA. Caso resultado positivo, será possivel 
desenvolver um metodo em que a rotaçao dos certificados possa ser realizada a quente.

Para mais referencias em testes, verifique o arquivo: Testes Openssl.

passos:

explicar os diferentes processos de criação dos certificados e de configuração do arquivo do galera

1- construir cluster;
2- gerar Certificate Authorite.                     
3- gerar certificado assinado pela CA;
4- compartilhar os arquivos com os outros nos
5- construir cluster utilizando os mesmos certificados;
6- testes de funcionamento; A comunicação realmente esta sendo criptografada, tcpdump?
7- criar certificados diferentes baseados na mesma CA 
8- construir cluster utilizando certificados diferentes;
9- testes de funcionamento; A comunicação realmente esta sendo criptografada, tcpdump?
10- substituir o certificado a quente; funciona?

--------------------------------------------------------------------------------------------------------------------
1- construir cluster; 

Todas as maquinas ja foram configuradas com galera cluster, basta iniciar o cluster a partir do comando:
# galera_new_cluster.

2- gerar Certificate Authorite.

Criar uma CA:
# openssl req -nodes -x509 -days 3650 -newkey rsa:4096  -keyout ca-senhasegura.key -out ca-senhasegura.crt -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.ca.senhasegura.com/emailAddress=segi9@senhasegura.com"

3- gerar certificado assinado pela CA;

# openssl req -newkey rsa:4096 -nodes -keyout galera.key -out galera.csr -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.server.senhasegura.com/emailAddress=segi9@senhasegura.com"
# openssl x509 -req -in galera.csr -days 3650 -CA ca-senhasegura.crt -CAkey ca-senhasegura.key -set_serial 01 -out galera.crt

verifique se há erros com os certificados
# openssl verify -CAfile ca-senhasegura.crt galera.crt
#   galera.crt: OK

4- compartilhar os arquivos com os outros nos

lembre de garantir a permissao de leitura da chave do servidor
# chmod 444 galera.key

# node 2
# scp eryck@192.168.3.150:/etc/ossl/ca-senhasegura.crt /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.crt /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.key /etc/ossl/

# node 3
# scp eryck@192.168.3.150:/etc/ossl/ca-senhasegura.crt /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.crt /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.key /etc/ossl/

5- construir cluster utilizando os mesmos certificados;

Abra o arquivo de configuraçao do mariaDB / Galera Cluster. tanto /etc/mysql/conf.d/galera.cnf ou /etc/my.cnf
Adidione o seguinte parametro:

# vim /etc/my.cnf
    (...)
    wsrep_provider_options="socket.ssl_key=/etc/ossl/galera.key;socket.ssl_cert=galera.crt;socket.ssl_ca=ca-senhasegura.crt"
    (...)
    

Para aplicar a configuraçao, reinicie todos os nós do cluster e, no ultimo nó a ser desligado, execute galera_new_cluster
para inicar o cluster novamente. É importante iniciar o cluster no ultimo nó a ser desligado para obter as informaçoes mais 
atualizadas do banco de dados. a config de bootstrap evita que o nó errado seja iniciado.
    
6- testes de funcionamento; A comunicação realmente esta sendo criptografada, tcpdump?

ouvindo a comunicação entre os nós
# tcpdump -ni enp0s3 -w /home/eryck/dump -s 0
    tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
    ^C436 packets captured
    468 packets received by filter
    0 packets dropped by kernel
    
pegando o arquivo do servidor
# eryck@debian:~/tcpdump/testeCA$ scp 192.168.3.150:/home/eryck/dump /etc/ossl/

Analisando o pacote com wireshark: resultado positivo, criptografia ativada.

7- criar certificados diferentes baseados na mesma CA 

os nomes dos certificados se manterão os mesmos para poupar o trabalho de alterar o arquivo de configuração
mas note que o CN sera diferente.

# node 1
# openssl req -newkey rsa:4096 -nodes -keyout galera.key -out galera.csr -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.server1.senhasegura.com/emailAddress=segi9@senhasegura.com"
# openssl x509 -req -in galera.csr -days 3650 -CA ca-senhasegura.crt -CAkey ca-senhasegura.key -set_serial 01 -out galera.crt

verifique se há erros com os certificados
# openssl verify -CAfile ca-senhasegura.crt galera.crt
#   galera.crt: OK

no primeiro teste irei apenas alterar o certificado do nó 1 e manter o 2 e 3 com o mesmo certificado, irei reiniciar apenas o nó 1
para aplicar o novo certificado 

# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar

teste da criptografia:

# tcpdump -ni enp0s3 -w /home/eryck/dump2 -s 0
    tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
    ^C533 packets captured
    534 packets received by filter
    0 packets dropped by kernel

Analise do arquivo com wireshark: resultado positivo, a criptografia ainda está ativa no nó com certificado diferente.

Teste com cada nó com um certificado diferente:

# node 2
# openssl req -newkey rsa:4096 -nodes -keyout galera.key -out galera.csr -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.server.senhasegura.com/emailAddress=segi9@senhasegura.com"
# openssl x509 -req -in galera.csr -days 3650 -CA ca-senhasegura.crt -CAkey ca-senhasegura.key -set_serial 01 -out galera.crt

verifique se há erros com os certificados
# openssl verify -CAfile ca-senhasegura.crt galera.crt
#   galera.crt: OK

verifique a permissao das chaves privadas
# ls -l
# chmod 444 galera.key

# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar


# node 3
# openssl req -newkey rsa:4096 -nodes -keyout galera.key -out galera.csr -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.server.senhasegura.com/emailAddress=segi9@senhasegura.com"
# openssl x509 -req -in galera.csr -days 3650 -CA ca-senhasegura.crt -CAkey ca-senhasegura.key -set_serial 01 -out galera.crt

verifique se há erros com os certificados
# openssl verify -CAfile ca-senhasegura.crt galera.crt
#   galera.crt: OK

verifique a permissao das chaves privadas
# ls -l
# chmod 444 galera.key

# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar

note que a permissao das chaves pode ser o principal fator de erros.

8- construir cluster utilizando certificados diferentes;

verifique se todos os serviços estao ativos:
# sudo systemctl status mysql
    (...)
    Active
    (...)

9- testes de funcionamento; A comunicação realmente esta sendo criptografada, tcpdump?

# tcpdump -ni enp0s3 -w /home/eryck/dump3 -s 0
    tcpdump: listening on enp0s3, link-type EN10MB (Ethernet), snapshot length 262144 bytes
    ^C705 packets captured
    742 packets received by filter
    0 packets dropped by kernel


10- substituir o certificado a quente; funciona?

para realizar esse teste irei fazer o seguinte procedimento:

    criar um novo certificado e chave no nó 1
    aplicar o novo certificado
    reinicar o serviço mysql
    monitorar o que acontece.

    caso resultado positivo irei repassar o novo certificado para o nó 2 e repetirei o processo do nó 1
    caso resultado positivo irei fazer o mesmo com o nó 3.

no final do teste, todos os nós terao os seus certificados rotacionados enquanto o serviço se mantem ativo.

criar um novo certificado:
# openssl req -newkey rsa:4096 -nodes -keyout galera.key -out galera.csr -subj "/C=BR/ST=Sao Paulo/L=Sao Paulo/O=MT4 Networks/OU=MT4 Networks/CN=www.server4.senhasegura.com/emailAddress=segi9@senhasegura.com"
# openssl x509 -req -in galera.csr -days 3650 -CA ca-senhasegura.crt -CAkey ca-senhasegura.key -set_serial 01 -out galera.crt

verifique se há erros com os certificados
# openssl verify -CAfile ca-senhasegura.crt galera.crt
#   galera.crt: OK

verifique a permissao das chaves privadas
# ls -l
# chmod 444 galera.key

# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar

copiar o novo certificado e chave para o nó 2:
# scp eryck@192.168.3.150:/etc/ossl/galera.key /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.crt /etc/ossl/

reinicar o serviço mysql para aplicar o certificado:
# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar

copiar o novo certificado e chave para o nó 3:
# scp eryck@192.168.3.150:/etc/ossl/galera.key /etc/ossl/
# scp eryck@192.168.3.150:/etc/ossl/galera.crt /etc/ossl/

reinicar o serviço mysql para aplicar o certificado:
# sudo systemctl stop mysql
# sudo systemctl start mysql
#   resultado bem sucedido, serviço foi capaz de iniciar

--------------------------------------------------------------------------------------------------------------------
Conclusão:

Foi possivel alterar os certificados de cada nó sem ter que derrubar o cluster por completo.
isso foi possivel devido ao CA criado e compartilhado entre os nós ser o responsavel por certificar a veracidade
dos certificados diferentes. 

Em um cenário onde existe uma CA e os certificados dos servidores sao assinados por ela, é possivel realizar rotacão
deles facilmente. Porém, uma vez que a CA expirar deverá ser criada outra CA e novos certificados, sendo necessário 
derrubar o cluster por completo.

Eu vejo isso como uma vantagem, onde os certificados tem apenas 1 ano de validade e a CA 5 anos. a rotaçao poderá
ser feita a cada ano sem derrubar o serviço e é apenas necessário derrubar o sistema a cada 5 anos, providenciando
maior disponibilidade do serviço. 







--------------------------------------------------------------------------------------------------------------------





















